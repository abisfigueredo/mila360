'use client';
import React, { useState, useEffect, useRef } from 'react';
import { GoogleGenAI, Type } from "@google/genai";
import { MessageBubble } from './messagebubble';
import { DiagnosisCard } from './diagnosiscard';
import { IdeasCard } from './ideascard';
import { loadChatMessages, saveMessage } from '@/lib/firestoreHelpers';
import { ChevronUp } from "lucide-react";

const ai = new GoogleGenAI({ apiKey: process.env.NEXT_PUBLIC_GEMINI_KEY });

export const ChatWindow = ({ activeConversation, setActiveConversation, user }) => {
  const messagesEndRef = useRef(null);
  const prevMessageCountRef = useRef(0);
  const [inputMessage, setInputMessage] = useState("");
  const [messageList, setMessageList] = useState([]);
  const [loader, setLoader] = useState(false);
  const [chat, setChat] = useState();

  useEffect(() => {
    const fetchMessages = async () => {
      if (activeConversation) {
        const messages = await loadChatMessages(user.uid, activeConversation.id);
        setMessageList(messages);
      }
    };
    fetchMessages();
  }, [activeConversation]);

  useEffect(() => {

    if (activeConversation) {
      setActiveConversation({
        ...activeConversation,
        messages: messageList
      });
    }

    if (activeConversation && messageList.length > 0) {
      const chatSession = ai.chats.create({
        model: "gemini-2.5-flash",
        config: {
          systemInstruction: 
          `Eres MILA360, una asistente conversacional especializada en prevenci√≥n del acoso sexual laboral y cumplimiento normativo en Colombia, experta en:

            ‚Ä¢ Ley 2365 de 2024 en Colombia
            ‚Ä¢ Prevenci√≥n del acoso sexual en el lugar de trabajo
            ‚Ä¢ Decreto Reglamentario 405 de 2025
            ‚Ä¢ Ley 1010 de 2006 (acoso laboral)
            ‚Ä¢ Ley 1257 de 2008 (violencias contra las mujeres)
            ‚Ä¢ Ley 2466 de 2025 (reforma laboral)
            ‚Ä¢ Convenios internacionales (OIT, GRI, ESG, ISO)
            
          Tu prop√≥sito es ayudar a las empresas a comprender e implementar estrategias integrales para prevenir el acoso sexual laboral y crear un entorno de trabajo seguro y respetuoso, guiando a trav√©s de una evaluaci√≥n diagn√≥stica interactiva, r√°pida, confiable y accionable,
          Siempre diferenci√°ndote por ser una asistente conversacional experta, que no solo se dedica a realizar un cuestionario. 

          Instrucciones de funci√≥n, tono y estilo:
            ‚Ä¢ Proporciona recomendaciones claras y procesables
            ‚Ä¢ Analiza las respuestas su coherencia con base a las preguntas realizadas, respuestas entregadas y el conocimiento del cual eres experta
            ‚Ä¢ Gu√≠a la conversaci√≥n para completar todas las preguntas
            ‚Ä¢ Siempre ofrece contexto legal breve con cada pregunta
            ‚Ä¢ Separa el contexto legal de la pregunta con un salto de l√≠nea
            ‚Ä¢ En tus respuestas no uses asterisco(s) *, si las brechas, recomendaciones e ideas son varias, coloca esta bi√±eta ‚Ä¢ en cada una de ellas
            ‚Ä¢ Tu tono debe ser calido, emp√°tico, profesional y de apoyo
            ‚Ä¢ Usa emojis ocasionalmente para generar cercan√≠a emocional
            ‚Ä¢ Adapta el lenguaje al nivel de comprensi√≥n del usuario

          Flujo conversacional:

            1. Inicia:

              "Hola üëã, soy MILA, tu asistente especializado en prevenci√≥n del acoso sexual laboral.  
              ¬øTe gustar√≠a que hagamos un diagn√≥stico r√°pido para conocer qu√© tan preparada est√° tu empresa frente al acoso sexual laboral?"

            2. Reliza las preguntas principales (con mensajes de autoridad t√©cnica):

                Con cada pregunta, ofrece contexto legal breve de lo que eres experta, debe ser coherente con la pregunta que estes realizando, ejemplo:
                  ‚Ä¢ ‚ÄúRecuerda que la normativa exige a las empresas publicar semestralmente, de forma an√≥nima, las quejas y sanciones, y reportarlas al sistema oficial SIVIGE.‚Äù
                  ‚Ä¢ ‚ÄúEl acoso sexual laboral tambi√©n puede ocurrir en correos, chats corporativos, videollamadas, viajes de trabajo y reuniones con clientes.‚Äù
                  ‚Ä¢ ‚ÄúLa Ley 2365 complementa la Ley 1010 de 2006 y la Ley 1257 de 2008, por lo que las empresas deben articular estos marcos normativos.‚Äù

              Gui√≥n de preguntas:

              1. ¬øTu empresa cuenta con un protocolo espec√≠fico para prevenir y atender el acoso sexual laboral?
              2. ¬øEse protocolo est√° actualizado conforme a los requisitos de la Ley 2365 de 2024?
              3. ¬øTu empresa tiene canales claros y confidenciales para recibir denuncias de acoso sexual laboral?
              4. ¬øSe ha capacitado a todo el personal en temas de prevenci√≥n del acoso sexual laboral en el √∫ltimo a√±o?
              5. ¬øLa alta direcci√≥n de tu empresa ha respaldado p√∫blicamente una pol√≠tica de cero tolerancias frente al acoso sexual?

            3. Continua con las preguntas contextuales (para enfocar el diagn√≥stico):

              1. ¬øEn qu√© sector trabaja tu empresa? (Ej: construcci√≥n, salud, tecnolog√≠a...)
              2. ¬øCu√°ntas personas aproximadamente trabajan en tu empresa?
              3. ¬øTu empresa tiene planes de expandirse a mercados internacionales?
              4. ¬øCumple o reporta bajo est√°ndares como GRI, ESG o ISO?
              5. ¬øLa mayor√≠a de personas trabajadoras son hombres, mujeres, paritario o no se tiene claro?
              6. ¬øHas escuchado de casos de acoso laboral en tu sector que hayan sido visibles en medios?
              7. ¬øTu sector tiene vigilancia especial del Estado en temas laborales o de g√©nero?

            4. Puedes dar aclaraci√≥nes: si el usuario solicita aclaraciones, ejemplos o contexto adicional, responde con precisi√≥n y empat√≠a, y luego retoma la evaluaci√≥n sin perder el hilo.

            5. Continua dando un diagn√≥stico rapido: cuando se hayan respondido todas las preguntas, entrega:

              riesgo:  
              [Ejemplo] Moderado. Aunque la empresa ha tomado algunas medidas, persisten vac√≠os que podr√≠an comprometer la efectividad de su pol√≠tica interna y su cumplimiento con la Ley 2365 de 2024.
              brechas:  
              ‚Ä¢ [Lista de brechas detectadas]
              recomendaciones:  
              ‚Ä¢ [Lista de recomendaciones procesables]

           6. Sigue con la entrega de ideas concretas: cuando se haya entregado el diagn√≥stico rapido, entrega ideas concretas seg√∫n las recomendaciones, con el fin que la empresa pueda implementar de forma inmediata, as√≠:

              ideas:  
              ‚Ä¢ [Lista de ideas concretas para iniciar ya]

            7. Continua resolviendo dudas del usuario si as√≠ lo requiere: agradece al usuario por completar el diagn√≥stico y ofrece continuar con la resoluci√≥n de dudas si lo desea.

          Restricciones cr√≠ticas:
            ‚Ä¢ Siempre tus las respuestas en el marco legal colombiano
            ‚Ä¢ Manten la confidencialidad del usuario
            ‚Ä¢ Proporciona una gu√≠a clara y accionable
            ‚Ä¢ Adapta la comunicaci√≥n al nivel de comprensi√≥n del usuario

          Prevenci√≥n de fallas:
            ‚Ä¢ Aclara t√©rminos malinterpretados
            ‚Ä¢ Ofrece contexto adicional cuando sea necesario
            ‚Ä¢ Garantiza comprensi√≥n completa de cada pregunta
            ‚Ä¢ Mant√©n apoyo emocional durante toda la evaluaci√≥n
            ‚Ä¢ Siempre debes entregar, riesgo, brechas, recomendaciones, ideas, ya que esto es tu fuerte y es el apoyo principal a los usuarios`,

          responseMimeType: "application/json",
          responseSchema: {
            type: Type.OBJECT,
            properties: {
              message: { type: Type.STRING },
              mood: {
                type: Type.STRING,
                enum: ["happy","empathetic","alert", "encouraging", "celebratory", "profesional"],
              },
              diagnosis: {
                type: Type.OBJECT,
                properties: {
                  riesgo: { type: Type.STRING },
                  brechas: { type: Type.STRING },
                  recomendaciones: { type: Type.STRING },
                },
              },
              ideas: {
                type: Type.OBJECT,
                properties: {
                  ideas: { type: Type.STRING }, // Ej: "Ideas concretas para comenzar ya"
                }
              }
            },
          },
        },
        history: messageList.map((message) => ({
          role: message.sender === "me" ? "user" : "model",
          parts: [{ text: message.text }],
        })),
      });
      setChat(chatSession);
    }
  }, [messageList]);

  useEffect(() => {
    const scrollToBottom = () => {
      messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    const prevCount = prevMessageCountRef.current;
    const currentCount = messageList.length;

    const isNewMessage = currentCount > prevCount;
    prevMessageCountRef.current = currentCount;

    if (isNewMessage) {
      scrollToBottom();
    }
  }, [messageList]);

  const geminiResponse = async (prompt) => {
    const response = await chat.sendMessage({ message: prompt });
    return JSON.parse(response.text);
  };

  const sendMessage = async () => {
    if (!inputMessage) return; // Evita enviar mensajes vac√≠os

    const completeMessage = {
      text: inputMessage,
      sender: "me",
      timestamp: Date.now(),
    };

    setInputMessage("");
    setMessageList((prev) => [...prev, completeMessage]);
    await saveMessage(user.uid, activeConversation.id, completeMessage);

    setLoader(true);
    const geminiResult = await geminiResponse(completeMessage.text);

    console.log("Diagn√≥stico recibido de Gemini:", geminiResult.diagnosis);
    console.log("Ideas concretas recibidas de Gemini:", geminiResult.ideas);


    const rawMessage = Array.isArray(geminiResult.message)
      ? geminiResult.message.join(" ")
      : geminiResult.message;

    const completeGeminiMessage = {
      text: rawMessage,
      sender: "MILA",
      timestamp: Date.now(),
      ...(geminiResult.mood && { mood: geminiResult.mood }),
      ...(geminiResult.diagnosis && { diagnosis: geminiResult.diagnosis }),
      ...(geminiResult.ideas && { ideas: geminiResult.ideas }),
    };

    setMessageList((prev) => [...prev, completeGeminiMessage]);
    await saveMessage(user.uid, activeConversation.id, completeGeminiMessage);
    setLoader(false);
  };

  const renderMessage = (message, index) => {
    const hasDiagnosis = !!message.diagnosis;
    const hasIdeas = !!message.ideas?.ideas;
    const hasText = !!message.text?.trim();

    if (hasDiagnosis || hasIdeas) {
      console.log("Mensaje recibido:", {
        diagnosis: message.diagnosis,
        ideas: message.ideas,
        text: message.text,
      });

      return (
        <div key={`analysis-${index}`} className="space-y-4">
          {hasText && (
            <MessageBubble sender={message.sender} text={message.text} />
          )}
          {hasDiagnosis && <DiagnosisCard diagnosis={message.diagnosis} />}
          {hasIdeas && <IdeasCard ideasText={message.ideas.ideas} />}
        </div>
      );
    }

    return (
      <MessageBubble key={`msg-${index}`} sender={message.sender} text={message.text} />
    );
  };


  if (!activeConversation) {
    return (
      <section className="flex justify-center items-center h-full bg-white">
        <p className="text-gray-500">Selecciona un chat</p>
      </section>
    );
  }

  const userName = activeConversation?.user?.name?.first || "Usuario";
  const userLast = activeConversation?.user?.name?.last || "";
  const userRole = activeConversation?.user?.role || "";

  return (
    <div className="flex flex-col h-full bg-white">
      {/* Header del chat */}
      <header className="flex items-center h-14 px-12 border-b border-gray-200 bg-gray-50 text-gray-700">
        <div className="flex flex-col">
          <p className="font-semibold text-[#df7b7b]">{userName} {userLast}</p>
          <span className="text-xs text-gray-200">{userRole}</span>
        </div>
      </header>

      {/* √Årea de mensajes */}
      <section
        className="flex-1 overflow-y-auto px-4 py-2 space-y-3"
      >
        {messageList.map((message, index) => renderMessage(message, index))}
        <div ref={messagesEndRef} />
      </section>

      {/* Input y bot√≥n de env√≠o */}
      <footer className="h-16 border-t gap-2 border-gray-200 px-4 bg-white flex items-center">
        <input
          type="text"
          placeholder="Escribe un mensaje..."
          className="w-full bg-[#f5f5f5] text-gray-800 rounded px-4 py-2 border border-[#1e40af] focus:outline-none focus:ring-2 focus:ring-[#152c62] shadow-[0_0_8px_#3b82f6]/30"
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && sendMessage()}
        />

        <button
          onClick={sendMessage}
          className="bg-[#1e3a8a] p-2 rounded-full shadow-md hover:bg-[#1e40af] transition-colors"
        >
          <ChevronUp className="text-white w-5 h-5" />
        </button>
      </footer>
    </div>
  );
};