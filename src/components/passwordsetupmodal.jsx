import { useState } from "react";
import { getAuth, createUserWithEmailAndPassword } from "firebase/auth";
import { doc, setDoc, getDoc, serverTimestamp, collection, addDoc } from "firebase/firestore";
import { db } from "@/lib/firebaseConfig";
import { LoginModal } from "@/components/loginmodal";
import { Eye, EyeOff } from "lucide-react";
import emailjs from "@emailjs/browser"

export const PasswordSetupModal = ({ formData, onSuccess, onClose }) => {
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const auth = getAuth();
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const isPasswordValid = (password) => {
    const minLength = /.{8,}/;
    const hasUppercase = /[A-Z]/;
    const hasLowercase = /[a-z]/;
    const hasNumber = /[0-9]/;

    return (
      minLength.test(password) &&
      hasUppercase.test(password) &&
      hasLowercase.test(password) &&
      hasNumber.test(password)
    );
  };


  const email = formData?.email?.trim().toLowerCase();

  const handleCreateAccount = async () => {
    if (!password.trim()) {
      setErrorMsg("La contrase√±a no puede estar vac√≠a.");
      return;
    }

    if (!email) {
      setErrorMsg("El correo es obligatorio para crear la cuenta.");
      return;
    }

    if (password !== confirmPassword) {
      setErrorMsg("Las contrase√±as no coinciden.");
      return;
    }

    if (!isPasswordValid(password)) {
      setErrorMsg("La contrase√±a debe tener al menos 8 caracteres, may√∫sculas, min√∫sculas y n√∫meros.");
      return;
    }

    setLoading(true);
    setErrorMsg("");

    try {
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );

      const user = userCredential.user;

      const userRef = doc(db, "users", user.uid);
      const existingUser = await getDoc(userRef);

      // Registrar usuario
      if (!existingUser.exists()) {
        await setDoc(userRef, {
          uid: user.uid,
          name: {
            first: formData.nombre?.trim() || "",
            last: formData.apellido?.trim() || "",
          },
          bussinesdata: {
            company: formData.empresa?.trim() || "",
            position: formData.cargo?.trim() || "",
          },
          email,
          registered: {
            date: serverTimestamp(),
          },
        });
      }

      // Enviar correo de invitaci√≥n
      await emailjs.send(
        process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID,
        process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID_BIENVENIDA,
        {
          nombre: formData.nombre,
          apellido: formData.apellido,
          email: email,
          empresa: formData.empresa,
          cargo: formData.cargo,
        },
        process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY
      );
      
      // Crear conversaci√≥n inicial con MILA
      const chatsRef = collection(db, "users", user.uid, "chats");
      const newChatRef = await addDoc(chatsRef, {
        createdAt: Date.now(),
        updatedAt: Date.now(),
        lastMessage: "Hola üëã, soy MILA, tu asistente especializado en prevenci√≥n del acoso sexual laboral, ¬øTe gustar√≠a que hagamos un diagn√≥stico rapido para conocer qu√© tan preparada est√° tu empresa frente al acoso sexual laboral?",
      });

      const welcomeMessage = {
        text: "Hola üëã, soy MILA, tu asistente especializado en prevenci√≥n del acoso sexual laboral, ¬øTe gustar√≠a que hagamos un diagn√≥stico rapido para conocer qu√© tan preparada est√° tu empresa frente al acoso sexual laboral?",
        sender: "MILA",
        timestamp: Date.now(),
      };

      const messagesRef = collection(db, "users", user.uid, "chats", newChatRef.id, "messages");
      await addDoc(messagesRef, welcomeMessage);

      localStorage.setItem("correoUsuario", email);
      onSuccess();

    } catch (error) {
      if (error.code === "auth/email-already-in-use") {
        setErrorMsg("Este correo ya est√° registrado. Intenta iniciar sesi√≥n.");
        // Devuelve al formulario con el mensaje
        if (onClose) onClose("email-exists"); // Devuelve al formulario de registro con el mensaje
        return;
      }
      console.error("Error al crear cuenta:", error);
      setErrorMsg("Hubo un problema al crear la cuenta. Intenta nuevamente.");
    } finally {
      setLoading(false);
    }
  };

  //Variable para validar que el password sea valido y que adem√°s coincida con la confirmaci√≥n
  const canCreateAccount =
    isPasswordValid(password) &&
    password === confirmPassword &&
    !loading;

  return (
    <>
      {!showLoginModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-md">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-sm p-6 relative">
            <h2 className="text-xl font-bold text-gray-900 mb-4 text-center">
              Crea tu contrase√±a de acceso
            </h2>

            {errorMsg && (
              <div className="bg-red-100 text-red-700 px-3 py-2 rounded-md mb-4 text-sm">
                {errorMsg}
              </div>
            )}

            {/* Input de contrase√±a */}
            <div className="relative mb-4">
              <input
                type={showPassword ? "text" : "password"}
                placeholder="Contrase√±a segura"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md pr-10"
              />
              {showPassword && (
                <p className="text-xs text-gray-500 mt-1 italic">
                  üîí Recuerda mantener tu contrase√±a segura si est√°s en un lugar p√∫blico.
                </p>
              )}

              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-2 text-gray-500 hover:text-gray-700"
              >
                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
              </button>
            </div>

            {password && !isPasswordValid(password) && (
              <p className="text-sm text-red-600 mb-2">
                La contrase√±a debe tener al menos 8 caracteres, una may√∫scula, una min√∫scula y un n√∫mero.
              </p>
            )}

            {/* Input de confirmaci√≥n */}
            <div className="relative mb-4">
              <input
                type={showPassword ? "text" : "password"}
                placeholder="Confirmar contrase√±a"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md pr-10"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-2 text-gray-500 hover:text-gray-700"
              >
                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
              </button>
            </div>

            {confirmPassword && password !== confirmPassword && (
              <p className="text-sm text-red-600 mb-2">Las contrase√±as no coinciden.</p>
            )}




            <div className="text-sm text-gray-600 mb-4">
              La contrase√±a debe contener:
              <ul className="list-disc list-inside mt-1 text-gray-500">
                <li>Al menos 8 caracteres</li>
                <li>Una letra may√∫scula</li>
                <li>Una letra min√∫scula</li>
                <li>Un n√∫mero</li>
              </ul>
            </div>

            <button
              onClick={handleCreateAccount}
              disabled={!canCreateAccount}
              className={`w-full py-2 rounded-md transition-colors ${
                canCreateAccount
                  ? "bg-[#df7b7b] text-white hover:bg-[#d45858]"
                  : "bg-gray-300 text-gray-500 cursor-not-allowed"
              }`}
            >
              {loading ? "Creando..." : "Crear cuenta"}
            </button>


            <button
              onClick={onClose}
              className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 text-xl"
            >
              ‚úï
            </button>
          </div>
        </div>
      )}

      {showLoginModal && (
        <LoginModal
          presetEmail={email}
          onClose={() => {
            setShowLoginModal(false);
            onClose();
          }}
        />
      )}
    </>
  );
};
